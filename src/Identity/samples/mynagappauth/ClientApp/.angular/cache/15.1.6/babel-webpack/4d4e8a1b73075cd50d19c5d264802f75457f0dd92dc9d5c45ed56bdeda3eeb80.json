{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FetchDataComponent_div_4_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Confirm password: \");\n    i0.ɵɵelement(2, \"input\", 8);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FetchDataComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h4\");\n    i0.ɵɵtext(2, \"Cool stuff is waiting for authenticated people\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\")(4, \"form\", 2, 3);\n    i0.ɵɵlistener(\"ngSubmit\", function FetchDataComponent_div_4_Template_form_ngSubmit_4_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r2 = i0.ɵɵreference(5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.validate(_r2));\n    });\n    i0.ɵɵelementStart(6, \"div\");\n    i0.ɵɵtext(7, \"Username: \");\n    i0.ɵɵelement(8, \"input\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"div\");\n    i0.ɵɵtext(10, \"Password: \");\n    i0.ɵɵelement(11, \"input\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, FetchDataComponent_div_4_div_12_Template, 3, 0, \"div\", 1);\n    i0.ɵɵelementStart(13, \"button\", 6);\n    i0.ɵɵtext(14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(15, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function FetchDataComponent_div_4_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const _r2 = i0.ɵɵreference(5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      ctx_r6.register = !ctx_r6.register;\n      return i0.ɵɵresetView(_r2.resetForm());\n    });\n    i0.ɵɵtext(16);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(12);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.register);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.register ? \"Register\" : \"Login\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Switch to \", ctx_r0.register ? \"Login\" : \"Register\", \"\");\n  }\n}\nfunction FetchDataComponent_div_7_p_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\")(1, \"em\");\n    i0.ɵɵtext(2, \"Loading...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction FetchDataComponent_div_7_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Welcome, \", ctx_r8.fx.username, \"\");\n  }\n}\nfunction FetchDataComponent_div_7_div_3_canvas_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"canvas\", 10);\n  }\n  if (rf & 2) {\n    const eff_r11 = ctx.$implicit;\n    i0.ɵɵattribute(\"data-js\", eff_r11);\n  }\n}\nfunction FetchDataComponent_div_7_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FetchDataComponent_div_7_div_3_canvas_1_Template, 1, 1, \"canvas\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r9.fx.effects);\n  }\n}\nfunction FetchDataComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FetchDataComponent_div_7_p_1_Template, 3, 0, \"p\", 1);\n    i0.ɵɵtemplate(2, FetchDataComponent_div_7_p_2_Template, 2, 1, \"p\", 1);\n    i0.ɵɵtemplate(3, FetchDataComponent_div_7_div_3_Template, 2, 1, \"div\", 1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.fx);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.fx && ctx_r1.fx.username);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.fx);\n  }\n}\nexport class FetchDataComponent {\n  fetch() {\n    this.operationFailed = false;\n    this.http.get(this.baseUrl + 'effects').subscribe(result => {\n      this.fx = result;\n      if (this.fx.username) {\n        this.authenticated = true;\n      } else {\n        this.authenticated = false;\n      }\n    }, error => {\n      this.authenticated = false;\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  toggleRegister() {\n    this.register = this.register ? false : true;\n  }\n  validate(f) {\n    this.operationFailed = false;\n    if (f.valid) {\n      if (this.register) {\n        if (f.value.password === f.value.pconfirm) {\n          this.submitRegistration(f.value);\n        } else {\n          this.operationFailed = true;\n          this.operationReason = \"Passwords do not match\";\n        }\n      } else {\n        this.login(f.value);\n      }\n    } else {\n      this.operationFailed = true;\n      this.operationReason = \"Form validation failed.\";\n    }\n  }\n  submitRegistration(upwd) {\n    this.operationFailed = false;\n    this.http.post(this.baseUrl + 'identity/v1/register', {\n      username: upwd.username,\n      password: upwd.password\n    }).subscribe(_ => {\n      this.register = false;\n      alert('You successfully registered. Now login!');\n    }, error => {\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  login(uwpd) {\n    this.operationFailed = false;\n    this.http.post(this.baseUrl + 'identity/v1/login', {\n      username: uwpd.username,\n      password: uwpd.password,\n      cookieMode: true\n    }).subscribe(_ => {\n      this.authenticated = true;\n      this.fetch();\n    }, error => {\n      this.authenticated = false;\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.authenticated = false;\n    this.register = false;\n    this.operationFailed = false;\n    this.operationReason = \"\";\n    http.get(baseUrl + 'effects').subscribe(result => {\n      this.fx = result;\n      if (this.fx.username) {\n        this.authenticated = true;\n      }\n    }, error => console.error(error));\n  }\n}\nFetchDataComponent.ɵfac = function FetchDataComponent_Factory(t) {\n  return new (t || FetchDataComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject('BASE_URL'));\n};\nFetchDataComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FetchDataComponent,\n  selectors: [[\"app-fetch-data\"]],\n  decls: 8,\n  vars: 3,\n  consts: [[\"id\", \"tableLabel\"], [4, \"ngIf\"], [3, \"ngSubmit\"], [\"f\", \"ngForm\"], [\"type\", \"text\", \"name\", \"username\", \"required\", \"\", \"ngModel\", \"\"], [\"type\", \"password\", \"name\", \"password\", \"required\", \"\", \"ngModel\", \"\"], [\"type\", \"submit\"], [1, \"btn\", \"btn-link\", 3, \"click\"], [\"type\", \"password\", \"name\", \"pconfirm\", \"required\", \"\", \"ngModel\", \"\"], [\"onclick\", \"window.canvasStart(this);this.onclick=()=>{};\", \"width\", \"800\", \"height\", \"640\", \"style\", \"background: black;\", 4, \"ngFor\", \"ngForOf\"], [\"onclick\", \"window.canvasStart(this);this.onclick=()=>{};\", \"width\", \"800\", \"height\", \"640\", 2, \"background\", \"black\"]],\n  template: function FetchDataComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"JavaScript Effects\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"p\");\n      i0.ɵɵtext(3, \"This component demonstrates fetching data protected by auth from the server.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(4, FetchDataComponent_div_4_Template, 17, 3, \"div\", 1);\n      i0.ɵɵelementStart(5, \"div\");\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(7, FetchDataComponent_div_7_Template, 4, 3, \"div\", 1);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.authenticated);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\"Operation status: \", ctx.operationFailed ? ctx.operationReason : \"Success\", \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", true || ctx.authenticated);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.NgModel, i3.NgForm],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["i0","ctx_r6","FetchDataComponent","fetch","operationFailed","http","get","baseUrl","subscribe","result","fx","username","authenticated","error","operationReason","toggleRegister","register","validate","f","valid","value","password","pconfirm","submitRegistration","login","upwd","post","_","alert","uwpd","cookieMode","constructor","console","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\jeliknes\\source\\repos\\aspnetcore\\src\\identity\\samples\\mynagappauth\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.html","C:\\Users\\jeliknes\\source\\repos\\aspnetcore\\src\\identity\\samples\\mynagappauth\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["<h1 id=\"tableLabel\">JavaScript Effects</h1>\r\n\r\n<p>This component demonstrates fetching data protected by auth from the server.</p>\r\n\r\n<div *ngIf=\"!authenticated\">\r\n    <h4>Cool stuff is waiting for authenticated people</h4>\r\n    <div>\r\n        <form #f=\"ngForm\" (ngSubmit)=\"validate(f)\">\r\n            <div>Username: <input type=\"text\" name=\"username\" required ngModel></div>\r\n            <div>Password: <input type=\"password\" name=\"password\" required ngModel></div>                              \r\n            <div *ngIf=\"register\">Confirm password: <input type=\"password\" name=\"pconfirm\" required ngModel></div>\r\n            <button type=\"submit\">{{ register ? \"Register\" : \"Login\" }}</button>\r\n        </form>\r\n        <button class=\"btn btn-link\" (click)=\"register = !register;f.resetForm()\">Switch to {{ register ? \"Login\" : \"Register\" }}</button>\r\n    </div>\r\n</div> \r\n\r\n<div>Operation status: {{ operationFailed ? operationReason : \"Success\" }}</div>\r\n\r\n<div *ngIf=\"true || authenticated\">\r\n\r\n    <p *ngIf=\"!fx\"><em>Loading...</em></p>\r\n\r\n    <p *ngIf=\"fx && fx.username\">Welcome, {{ fx.username }}</p>\r\n\r\n    <div *ngIf=\"fx\">\r\n      <canvas *ngFor=\"let eff of fx.effects\" [attr.data-js]=\"eff\" onclick=\"window.canvasStart(this);this.onclick=()=>{};\" width=\"800\" height=\"640\" style=\"background: black;\">\r\n      </canvas>  \r\n    </div>\r\n\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public fx?: Effects;\r\n  public authenticated: boolean = false;\r\n  public register: boolean = false;\r\n  public operationFailed: boolean = false;\r\n  public operationReason: string = \"\";\r\n\r\n  public fetch() {\r\n    this.operationFailed = false;\r\n    this.http.get<Effects>(this.baseUrl + 'effects').subscribe(result => {\r\n      this.fx = result;\r\n      if (this.fx.username) {\r\n        this.authenticated = true;\r\n      }\r\n      else {\r\n        this.authenticated = false;\r\n      }\r\n    },\r\n      error => {\r\n        this.authenticated = false;\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  }\r\n\r\n  public toggleRegister() {\r\n    this.register = this.register ? false : true;\r\n                   \r\n  };\r\n\r\n  public validate(f: NgForm) {\r\n    this.operationFailed = false;\r\n    if (f.valid) {\r\n      if (this.register) {\r\n        if (f.value.password === f.value.pconfirm) {\r\n          this.submitRegistration(f.value);\r\n        }\r\n        else {\r\n          this.operationFailed = true;\r\n          this.operationReason = \"Passwords do not match\";\r\n        }\r\n      }\r\n      else {\r\n        this.login(f.value);\r\n      }\r\n    }\r\n    else {\r\n      this.operationFailed = true;\r\n      this.operationReason = \"Form validation failed.\";\r\n    }\r\n  }\r\n\r\n  public submitRegistration(upwd: UserPwd) {\r\n    this.operationFailed = false;\r\n    this.http.post(this.baseUrl + 'identity/v1/register', {\r\n      username: upwd.username, password: upwd.password\r\n    }).subscribe(_ => {\r\n        this.register = false;\r\n        alert('You successfully registered. Now login!');\r\n      }, error => {\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  };\r\n\r\n  public login(uwpd: UserPwd) {\r\n    this.operationFailed = false;\r\n    this.http.post(this.baseUrl + 'identity/v1/login', {\r\n      username: uwpd.username, password: uwpd.password, cookieMode: true\r\n    }).subscribe(_ => {\r\n        this.authenticated = true;\r\n        this.fetch();\r\n      }, error => {\r\n        this.authenticated = false;\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  };\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    http.get<Effects>(baseUrl + 'effects').subscribe(result => {\r\n      this.fx = result;\r\n      if (this.fx.username) {\r\n        this.authenticated = true;\r\n      }\r\n    },\r\n      error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface Effects {\r\n  username: string;\r\n  effects: string[];\r\n}\r\n\r\ninterface UserPwd {\r\n  username: string;\r\n  password: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}