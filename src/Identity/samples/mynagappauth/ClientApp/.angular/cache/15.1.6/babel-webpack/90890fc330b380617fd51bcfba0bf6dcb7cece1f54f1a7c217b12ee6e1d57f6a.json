{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nlet FetchDataComponent = class FetchDataComponent {\n  fetch() {\n    this.operationFailed = false;\n    this.http.get(this.baseUrl + 'effects').subscribe(result => {\n      this.fx = result;\n      if (this.fx.username) {\n        this.authenticated = true;\n      } else {\n        this.authenticated = false;\n      }\n    }, error => {\n      this.authenticated = false;\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  toggleRegister() {\n    this.register = this.register ? false : true;\n  }\n  validate(f) {\n    this.operationFailed = false;\n    if (f.valid) {\n      if (this.register) {\n        if (f.value.password === f.value.pconfirm) {\n          this.submitRegistration(f.value);\n        } else {\n          this.operationFailed = true;\n          this.operationReason = \"Passwords do not match\";\n        }\n      } else {\n        this.login(f.value);\n      }\n    } else {\n      this.operationFailed = true;\n      this.operationReason = \"Form validation failed.\";\n    }\n  }\n  submitRegistration(upwd) {\n    this.operationFailed = false;\n    this.http.post(this.baseUrl + 'identity/v1/register', {\n      username: upwd.username,\n      password: upwd.password\n    }).subscribe(_ => {\n      this.register = false;\n      alert('You successfully registered. Now login!');\n    }, error => {\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  login(uwpd) {\n    this.operationFailed = false;\n    this.http.post(this.baseUrl + 'identity/v1/login', {\n      username: uwpd.username,\n      password: uwpd.password,\n      cookieMode: true\n    }).subscribe(_ => {\n      this.authenticated = true;\n      this.fetch();\n    }, error => {\n      this.authenticated = false;\n      this.operationFailed = true;\n      this.operationReason = error;\n    });\n  }\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this.authenticated = false;\n    this.register = false;\n    this.operationFailed = false;\n    this.operationReason = \"\";\n    http.get(baseUrl + 'effects').subscribe(result => {\n      this.fx = result;\n      if (this.fx.username) {\n        this.authenticated = true;\n      }\n    }, error => console.error(error));\n  }\n};\nFetchDataComponent = __decorate([Component({\n  selector: 'app-fetch-data',\n  templateUrl: './fetch-data.component.html'\n}), __param(1, Inject('BASE_URL'))], FetchDataComponent);\nexport { FetchDataComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","FetchDataComponent","fetch","operationFailed","http","get","baseUrl","subscribe","result","fx","username","authenticated","error","operationReason","toggleRegister","register","validate","f","valid","value","password","pconfirm","submitRegistration","login","upwd","post","_","alert","uwpd","cookieMode","constructor","console","selector","templateUrl","__param"],"sourceRoot":"","sources":["C:\\Users\\jeliknes\\source\\repos\\aspnetcore\\src\\identity\\samples\\mynagappauth\\ClientApp\\src\\app\\fetch-data\\fetch-data.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgForm } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-fetch-data',\r\n  templateUrl: './fetch-data.component.html'\r\n})\r\nexport class FetchDataComponent {\r\n  public fx?: Effects;\r\n  public authenticated: boolean = false;\r\n  public register: boolean = false;\r\n  public operationFailed: boolean = false;\r\n  public operationReason: string = \"\";\r\n\r\n  public fetch() {\r\n    this.operationFailed = false;\r\n    this.http.get<Effects>(this.baseUrl + 'effects').subscribe(result => {\r\n      this.fx = result;\r\n      if (this.fx.username) {\r\n        this.authenticated = true;\r\n      }\r\n      else {\r\n        this.authenticated = false;\r\n      }\r\n    },\r\n      error => {\r\n        this.authenticated = false;\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  }\r\n\r\n  public toggleRegister() {\r\n    this.register = this.register ? false : true;\r\n                   \r\n  };\r\n\r\n  public validate(f: NgForm) {\r\n    this.operationFailed = false;\r\n    if (f.valid) {\r\n      if (this.register) {\r\n        if (f.value.password === f.value.pconfirm) {\r\n          this.submitRegistration(f.value);\r\n        }\r\n        else {\r\n          this.operationFailed = true;\r\n          this.operationReason = \"Passwords do not match\";\r\n        }\r\n      }\r\n      else {\r\n        this.login(f.value);\r\n      }\r\n    }\r\n    else {\r\n      this.operationFailed = true;\r\n      this.operationReason = \"Form validation failed.\";\r\n    }\r\n  }\r\n\r\n  public submitRegistration(upwd: UserPwd) {\r\n    this.operationFailed = false;\r\n    this.http.post(this.baseUrl + 'identity/v1/register', {\r\n      username: upwd.username, password: upwd.password\r\n    }).subscribe(_ => {\r\n        this.register = false;\r\n        alert('You successfully registered. Now login!');\r\n      }, error => {\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  };\r\n\r\n  public login(uwpd: UserPwd) {\r\n    this.operationFailed = false;\r\n    this.http.post(this.baseUrl + 'identity/v1/login', {\r\n      username: uwpd.username, password: uwpd.password, cookieMode: true\r\n    }).subscribe(_ => {\r\n        this.authenticated = true;\r\n        this.fetch();\r\n      }, error => {\r\n        this.authenticated = false;\r\n        this.operationFailed = true;\r\n        this.operationReason = error;\r\n      });\r\n  };\r\n\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) {\r\n    http.get<Effects>(baseUrl + 'effects').subscribe(result => {\r\n      this.fx = result;\r\n      if (this.fx.username) {\r\n        this.authenticated = true;\r\n      }\r\n    },\r\n      error => console.error(error));\r\n  }\r\n}\r\n\r\ninterface Effects {\r\n  username: string;\r\n  effects: string[];\r\n}\r\n\r\ninterface UserPwd {\r\n  username: string;\r\n  password: string;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}